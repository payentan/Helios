# Refer to https://kubernetes.io/docs/setup/independent/install-kubeadm/
#
- name: Disable swap [1/2]
  shell: swapoff -a

- name: Disable swap [2/2]
  shell: sed -i '/ swap / d' /etc/fstab

- name: Stop SELinux Enforcing [1/2]
  shell: setenforce 0

- name: Stop SELinux Enforcing [2/2]
  shell: sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

- name: Disable firewalld service
  service: name=firewalld state=stopped enabled=no

- name: Yum install yum-utils device-mapper-persistent-data lvm2 java-1.8.0-openjdk
  yum: 
    name:
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
      - java-1.8.0-openjdk
    state:
      present
      
- name: Add repository
  copy: src=docker-ce.repo dest=/etc/yum.repos.d/docker-ce.repo

- name: Yum install docker
  yum: name=docker-ce-18.06.0.ce state=present

- name: Enable and start Docker service
  service: name=docker state=started enabled=yes

- name: Transfer kubernetes.repo
  copy: src=kubernetes.repo dest=/etc/yum.repos.d/kubernetes.repo

- name: Transfer file k8s.conf
  copy: src=k8s.conf dest=/etc/sysctl.d/k8s.conf

- name: Set system parameters for k8s
  shell: sysctl --system

- name: Yum install kubelet kubeadm kubectl
  yum: 
    name:
      - kubelet-{{ K8S_VERSION }}
      - kubeadm-{{ K8S_VERSION }}
      - kubectl-{{ K8S_VERSION }}
    state:
      present
    disable_gpg_check:
      yes

#- name: Delete file kubernetes.repo
#  shell: rm -f /etc/yum.repos.d/kubernetes.repo

- name: Yum install epel-release
  yum:
    name:
      - epel-release
    state:
      present

- name: Yum install and pip rpm
  yum:
    name:
      - python-pip
    state:
      present

- name:  Install docker-py package.
  pip:
    name: docker-py

- name: Enable and start kubelet service
  service: name=kubelet state=started enabled=yes

- name: Create folder /run/registry/certs/
  file:
    path: /run/registry/certs/
    state: directory

- name: Check /run/registry/certs/ca.crt file 
  stat:
    path: /run/registry/certs/ca.crt
  register: sym

- name: Generate certificate files
  shell: openssl req -newkey rsa:4096 -nodes -sha256 -keyout /run/registry/certs/ca.key -x509 -days 365 -out /run/registry/certs/ca.crt -subj /CN=mynode11
  when: sym.stat.exists==False

- name: Check registry container
  shell: docker images | grep registry
  ignore_errors: True
  register: reg_output

- name: Load registry image
  shell: docker load --input /storage/docker-image/library/registry_2.tar
  when: reg_output.stdout=="" or reg_output.stdout.split()[0] != "registry"

- name: Create registry container
  docker_container:
    name: registry
    image: registry:2
    restart_policy: always
    volumes:
      - /storage/docker-registry/:/var/lib/registry
      - /run/registry/certs/:/certs/
    ports:
      - "5000:5000"
    env:
      REGISTRY_HTTP_TLS_CERTIFICATE: /certs/ca.crt
      REGISTRY_HTTP_TLS_KEY: /certs/ca.key 

- name: Pull kube-apiserver image 
  docker_image:
    name: "{{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/kube-apiserver:v{{ K8S_VERSION }}"

- name: Retag kube-apiserver image
  shell: docker tag {{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/kube-apiserver:v{{ K8S_VERSION }} k8s.gcr.io/kube-apiserver:v{{ K8S_VERSION }}

- name: Pull kube-controller-manager image
  docker_image:
    name: "{{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/kube-controller-manager:v{{ K8S_VERSION }}"

- name: Retag kube-controller-manager image
  shell: docker tag {{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/kube-controller-manager:v{{ K8S_VERSION }} k8s.gcr.io/kube-controller-manager:v{{ K8S_VERSION }}

- name: Pull kube-scheduler image
  docker_image:
    name: "{{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/kube-scheduler:v{{ K8S_VERSION }}"

- name: Retag kube-scheduler image
  shell: docker tag {{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/kube-scheduler:v{{ K8S_VERSION }} k8s.gcr.io/kube-scheduler:v{{ K8S_VERSION }}

- name: Pull kube-proxy image
  docker_image:
    name: "{{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/kube-proxy:v{{ K8S_VERSION }}"

- name: Retag kube-proxy image
  shell: docker tag {{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/kube-proxy:v{{ K8S_VERSION }} k8s.gcr.io/kube-proxy:v{{ K8S_VERSION }}

- name: Pull etcd image
  docker_image:
    name: "{{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/etcd:{{ ETCD_VERSION }}"

- name: Retag etcd image
  shell: docker tag {{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/etcd:{{ ETCD_VERSION }} k8s.gcr.io/etcd:{{ ETCD_VERSION }}

- name: Pull pause image
  docker_image:
    name: "{{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/pause:{{ PAUSE_VERSION }}"

- name: Retag pause image
  shell: docker tag {{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/pause:{{ PAUSE_VERSION }} k8s.gcr.io/pause:{{ PAUSE_VERSION }}

- name: Pull coredns image
  docker_image:
    name: "{{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/coredns:{{ DNS_VERSION }}"

- name: Retag coredns image
  shell: docker tag {{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/coredns:{{ DNS_VERSION }} k8s.gcr.io/coredns:{{ DNS_VERSION }}

- name: Pull flannel image
  docker_image:
    name: "{{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/quay.io/coreos/flannel:{{ FLANNEL_VERSION }}"

- name: Retag flannel image
  shell: docker tag {{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/quay.io/coreos/flannel:{{ FLANNEL_VERSION }} quay.io/coreos/flannel:{{ FLANNEL_VERSION }}

- name: Pull kubernetes-dashboard image
  docker_image:
    name: "{{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/kubernetes-dashboard:{{ DASHBOARD_VERSION }}"

- name: Retag kubernetes-dashboard image
  shell: docker tag {{ DOCKER_REGISTRY }}:{{DOCKER_REGISTRY_PORT}}/k8s.gcr.io/kubernetes-dashboard:{{ DASHBOARD_VERSION }} k8s.gcr.io/kubernetes-dashboard:{{ DASHBOARD_VERSION }}

- name: Kubeadm init
  shell: kubeadm init --pod-network-cidr=10.244.0.0/16 || echo

- name: Copy config file
  shell: mkdir -p $HOME/.kube && cp -i /etc/kubernetes/admin.conf $HOME/.kube/config && chown $(id -u):$(id -g) $HOME/.kube/config

- name: Deploy flannel network to the cluster [1/3]
  copy: src=kube-flannel.yml dest=~/kube-flannel.yml

- name: Deploy flannel network to the cluster [2/3]
  shell: kubectl apply -f ~/kube-flannel.yml

- name: Deploy flannel network to the cluster [3/3]
  shell: rm -f ~/kube-flannel.yml

# TODO: 
#   docker pull registry:2
#   docker run -d   --restart=always   --name registry   -v "$(pwd)"/certs:/certs   -e REGISTRY_HTTP_ADDR=0.0.0.0:443   -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt   -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key   -p 443:443   registry:2
#   openssl req -newkey rsa:4096 -nodes -sha256 -keyout /certs/ca.key -x509 -days 365 -out /certs/ca.crt -subj /CN=mynode11
#   scp /etc/docker/certs.d/192.168.93.135\:443/ca.crt mynode3:/etc/docker/certs.d/192.168.93.135\:443/ca.crt
